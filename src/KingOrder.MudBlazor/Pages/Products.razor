@page "/products"
@using KingOrder.Application.Shared.Services;
@using KingOrder.Application.Shared.ViewModels.Response;
@inject IKingOrderApiService KingOrderApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Products</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Products</MudText>
<MudText Class="mb-8">List of all products in the system.</MudText>
@if (products == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="products" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductResponseViewModel, object>(x=>x.Thumb)">Image</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ProductResponseViewModel, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductResponseViewModel, object>(x=>x.Description)">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductResponseViewModel, object>(x=>x.Gtin)">Gtin</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ProductResponseViewModel, object>(x=>x.Price)">Price</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Image">
                <MudAvatar Image="@GetImageWithHeader(context.Thumb)" style="transform:rotate(90deg);" />
            </MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Gtin">@context.Gtin</MudTd>
            <MudTd DataLabel="Price">@context.Price</MudTd>
            <MudTd DataLabel="Actions">
                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem @onclick="(args) => OnViewClick(args, context)">View</MudMenuItem>
                    <MudMenuItem @onclick="(args) => OnEditClick(args, context)">Edit</MudMenuItem>
                    <MudMenuItem @onclick="(args) => OnDeleteClick(args, context)">Delete</MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private IEnumerable<ProductResponseViewModel>? products;
    private string imageHeader = "data:image/png;base64,";

    protected override async Task OnInitializedAsync()
    {
        products = await KingOrderApiService.GetProductsAsync();
    }

    private string GetImageWithHeader(string thumb)
        => imageHeader + thumb;

    private async Task OnViewClick(MouseEventArgs e, ProductResponseViewModel product)
    {
        Snackbar.Add($"OnViewClick: {product.Guid}");
    }

    private async Task OnEditClick(MouseEventArgs e, ProductResponseViewModel product)
    {
        Snackbar.Add($"OnEditClick: {product.Guid}");
    }

    private async Task OnDeleteClick(MouseEventArgs e, ProductResponseViewModel product)
    {
        Snackbar.Add($"OnDeleteClick: {product.Guid}");

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this product? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = await DialogService.Show<DeleteDialog>("Delete", parameters, options).Result;

        if (!result.Canceled)
        {
            var deleteResult = await KingOrderApiService.DeleteProduct(product.Guid);

            if (deleteResult)
            {
                Snackbar.Add($"Product Deleted with success: {product.Guid}");
                products = null;
                await OnInitializedAsync();
            }
        }
    }
}
